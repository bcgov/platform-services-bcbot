apiVersion: v1
kind: ImageStream
metadata:
  name: "{{ name }}"
  namespace: "{{ project_name }}"
spec:
  lookupPolicy:
    local: false
---
apiVersion: v1
kind: DeploymentConfig
metadata:
  name: "{{ name }}-{{ env }}"
  namespace: "{{ project_name }}"
spec:
  replicas: 1
  selector:
    deploymentconfig: "{{ name }}-{{ env }}"
  strategy:
    resources:
      requests:
        cpu: '100m'
      limits:
        cpu: '150m'
  template:
    metadata:
      creationTimestamp: null
      labels:
        deploymentconfig: "{{ name }}-{{ env }}"
    spec:
      containers:
      - image: "{{ name }}:{{ version }}"
        name: hubot
        ports:
        - containerPort: 8000
          protocol: TCP
        resources:
          requests:
            cpu: '100m'
          limits:
            cpu: '150m'
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          timeoutSeconds: 10
        env:
        - name: ROCKETCHAT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rocketchat-bot-account-password
              key: BOT_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: hubot-redis
              key: redis-password
        - name: ROCKETCHAT_URL
          value: "{{ rocketchat.url }}"
        - name: ROCKETCHAT_USER
          value: "{{ rocketchat.bot_username }}"
        - name: ROCKETCHAT_USESSL
          value: "{{ rocketchat.use_ssl }}"
        - name: RESPOND_TO_DM
          value: "{{ rocketchat.respond_to_dm }}"
        - name: ROCKETCHAT_ROOM
          value: "{{ rocketchat.room }}"
        - name: REDIS_URL
          value: redis://:$(REDIS_PASSWORD)@hubot-redis-master.{{ project_name }}.svc.cluster.local
        - name: TZ
          value: America/Vancouver
        - name: HUBOT_LOG_LEVEL
          value: "{{ log_level }}"
  test: false
  triggers:
  - type: ConfigChange
  - imageChangeParams:
      automatic: true
      containerNames:
      - hubot
      from:
        kind: ImageStreamTag
        namespace: "{{ project_name }}"
        name: "{{ name }}:{{ version }}"
    type: ImageChange
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ name }}-{{ env }}"
  namespace: "{{ project_name }}"
spec:
  ports:
  - name: api
    port: 8000
    protocol: TCP
    targetPort: 8000
  selector:
    deploymentconfig: "{{ name }}-{{ env }}"
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: "{{ name }}-{{ env }}"
  namespace: "{{ project_name }}"
spec:
  host:
  port:
    targetPort: api
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: edge
  to:
    kind: Service
    name: "{{ name }}-{{ env }}"
    weight: 100
  wildcardPolicy: None
